# backend/data_pipeline/nba_stats_live_handler.py

import pandas as pd
from datetime import datetime, timedelta
import traceback
import random
import os
import sys

# Add backend directory to path
backend_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
if backend_dir not in sys.path:
    sys.path.append(backend_dir)

from caching.supabase_client import supabase

# Use relative imports
from .nba_schedule_fetcher import match_teams_to_schedule, fetch_todays_schedule

def fetch_live_games():
    """Fetch live game data from Supabase and verify against schedule."""
    try:
        print("Fetching live games from nba_live_game_stats...")
        
        # Get live games from Supabase
        response = supabase.table("nba_live_game_stats").select("*").execute()
        
        # If we have live games, verify them against the schedule
        if response.data:
            print(f"Found {len(response.data)} live games")
            live_games_df = pd.DataFrame(response.data)
            
            # Verify against official schedule
            verified_games = match_teams_to_schedule(live_games_df)
            return verified_games
        
        # If no live games found, try to get today's schedule for pre-game predictions
        print("No live games found. Using today's schedule for pre-game predictions...")
        official_schedule = fetch_todays_schedule()
        
        if not official_schedule.empty:
            # Convert schedule to live game format
            pregame_df = pd.DataFrame()
            pregame_df['game_id'] = official_schedule['game_id']
            pregame_df['home_team'] = official_schedule['home_team']
            pregame_df['away_team'] = official_schedule['away_team']
            pregame_df['game_date'] = official_schedule['game_date']
            
            # Add empty score columns
            for q in range(1, 5):
                pregame_df[f'home_q{q}'] = 0
                pregame_df[f'away_q{q}'] = 0
            
            pregame_df['home_score'] = 0
            pregame_df['away_score'] = 0
            pregame_df['current_quarter'] = 0  # Pre-game
            pregame_df['verified'] = True  # These came from official schedule
            
            return pregame_df
        
        # If we still have nothing, try using recent historical games
        print("No scheduled games found. Using recent games for testing...")
        return find_recent_games_for_testing()
        
    except Exception as e:
        print(f"Error fetching live games: {e}")
        traceback.print_exc()
        return pd.DataFrame()

def find_recent_games_for_testing():
    """Find recent completed games to use for testing the prediction model."""
    try:
        # Look back up to 5 days for recent games
        dates_to_try = []
        today = datetime.now()
        
        for i in range(1, 6):
            date = (today - timedelta(days=i)).strftime('%Y-%m-%d')
            dates_to_try.append(date)
        
        # Try each date until we find games
        for test_date in dates_to_try:
            response = supabase.table("nba_historical_game_stats")\
                .select("*")\
                .eq("game_date", test_date)\
                .limit(5).execute()
            
            if response.data:
                print(f"Found {len(response.data)} historical games from {test_date}")
                
                # Convert to DataFrame
                historical_df = pd.DataFrame(response.data)
                
                # Simulate as in-progress games
                live_games = []
                
                for _, game in historical_df.iterrows():
                    # Randomly select a quarter (1-4) for simulation
                    sim_quarter = random.randint(1, 4)
                    
                    # Create simulated live game with data up to selected quarter
                    sim_game = {
                        'game_id': game['game_id'],
                        'home_team': game['home_team'],
                        'away_team': game['away_team'],
                        'game_date': game['game_date'],
                        'current_quarter': sim_quarter,
                        'simulated': True  # Flag as simulated
                    }
                    
                    # Add quarter scores up to simulated quarter
                    for q in range(1, 5):
                        if q <= sim_quarter:
                            sim_game[f'home_q{q}'] = game.get(f'home_q{q}', 0)
                            sim_game[f'away_q{q}'] = game.get(f'away_q{q}', 0)
                        else:
                            sim_game[f'home_q{q}'] = 0
                            sim_game[f'away_q{q}'] = 0
                    
                    # Calculate current score based on visible quarters
                    sim_game['home_score'] = sum(
                        [sim_game.get(f'home_q{q}', 0) for q in range(1, sim_quarter+1)]
                    )
                    sim_game['away_score'] = sum(
                        [sim_game.get(f'away_q{q}', 0) for q in range(1, sim_quarter+1)]
                    )
                    
                    # Store actual final scores for validation
                    sim_game['actual_home_final'] = game['home_score']
                    sim_game['actual_away_final'] = game['away_score']
                    
                    live_games.append(sim_game)
                
                simulated_df = pd.DataFrame(live_games)
                simulated_df['verified'] = True  # Mark as verified since these are from historical data
                return simulated_df
                
        print("No recent games found for testing")
        return pd.DataFrame()
        
    except Exception as e:
        print(f"Error finding historical games: {e}")
        traceback.print_exc()
        return pd.DataFrame()

def prepare_games_for_prediction(games_df):
    """Ensure all required fields exist and data is properly formatted."""
    if games_df is None or games_df.empty:
        return games_df
    
    # Make a copy to avoid modifying the original
    df = games_df.copy()
    
    # Ensure all quarter columns exist and are numeric
    for q in range(1, 5):
        for team in ['home', 'away']:
            col = f'{team}_q{q}'
            if col not in df.columns:
                df[col] = 0
            else:
                df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
    
    # Ensure current_quarter exists
    if 'current_quarter' not in df.columns:
        df['current_quarter'] = 0
        for idx, row in df.iterrows():
            # Determine current quarter from quarter scores
            current_q = 0
            for q in range(1, 5):
                if row[f'home_q{q}'] > 0 or row[f'away_q{q}'] > 0:
                    current_q = q
            df.at[idx, 'current_quarter'] = current_q
    
    # Ensure score columns exist and are calculated correctly
    for idx, row in df.iterrows():
        # Calculate home score from quarters if not present
        if 'home_score' not in df.columns or pd.isna(row.get('home_score')):
            home_score = sum([row.get(f'home_q{q}', 0) or 0 for q in range(1, 5)])
            df.at[idx, 'home_score'] = home_score
        
        # Calculate away score from quarters if not present
        if 'away_score' not in df.columns or pd.isna(row.get('away_score')):
            away_score = sum([row.get(f'away_q{q}', 0) or 0 for q in range(1, 5)])
            df.at[idx, 'away_score'] = away_score
    
    # Calculate score ratio (home_score / total)
    df['score_ratio'] = 0.5  # Default for 0-0 games
    for idx, row in df.iterrows():
        home_score = float(row['home_score'])
        away_score = float(row['away_score'])
        total = home_score + away_score
        if total > 0:
            df.at[idx, 'score_ratio'] = home_score / total
    
    return df

def get_games_for_prediction():
    """Main function to get games for prediction."""
    # Fetch live or scheduled games
    games_df = fetch_live_games()
    
    if games_df.empty:
        print("No games available for prediction")
        return pd.DataFrame()
    
    # Prepare games for prediction
    prepared_df = prepare_games_for_prediction(games_df)
    
    return prepared_df

if __name__ == "__main__":
    # Test the live game handler
    print("Testing live game handler...")
    games = get_games_for_prediction()
    
    if not games.empty:
        print(f"\nFound {len(games)} games for prediction:")
        for idx, game in games.iterrows():
            print(f"{game['away_team']} ({game['away_score']}) @ {game['home_team']} ({game['home_score']}) - Quarter {game['current_quarter']}")
    else:
        print("No games available for prediction")