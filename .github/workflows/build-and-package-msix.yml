name: Build & Package ScoreGenius Appx

on:
  workflow_dispatch:

jobs:
  package-appx:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Compute dynamic version
        id: version
        run: |
          $base = "1.10"
          $runnum = $env:GITHUB_RUN_NUMBER
          $version = "$base.$runnum.0"
          Write-Output "version=$version" | Out-File -Encoding ASCII -NoNewline $env:GITHUB_OUTPUT

      - name: Patch manifest version
        shell: pwsh
        run: |
          $manifest = "frontend/windows_package/PackageRoot/AppxManifest.xml"
          if (-not (Test-Path $manifest)) { throw "Manifest not found at $manifest" }
          $version = '${{ steps.version.outputs.version }}'
          [xml]$xml = Get-Content -Raw -Encoding UTF8 $manifest
          $xml.Package.Identity.Version = $version
          $utf8NoBom = New-Object System.Text.UTF8Encoding($false)
          [System.IO.File]::WriteAllText($manifest, $xml.OuterXml, $utf8NoBom)
          Write-Output "Manifest patched to version $version"

      - name: Package Appx and sign (with secret sanitization)
        shell: pwsh
        env:
          SCOREGENIUS_PFX_B64: ${{ secrets.SCOREGENIUS_PFX_B64 }}
          SCOREGENIUS_PFX_PASSWORD: ${{ secrets.SCOREGENIUS_PFX_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $packageRoot = 'frontend/windows_package/PackageRoot'
          $version = '${{ steps.version.outputs.version }}'
          $output = "ScoreGenius_${version}.appx"

          # --- sanitize and validate base64 PFX secret ---
          if ($env:SCOREGENIUS_PFX_B64) {
            $cleaned = ($env:SCOREGENIUS_PFX_B64 -replace '[^A-Za-z0-9+/=]', '')
            try {
              [Convert]::FromBase64String($cleaned) | Out-Null
            } catch {
              Write-Error "PFX secret is not valid base64 after sanitization."
              exit 1
            }
            $pfxPath = "$PWD\scoregenius.pfx"
            [IO.File]::WriteAllBytes($pfxPath, [Convert]::FromBase64String($cleaned))
            Write-Output "Decoded and sanitized .pfx to $pfxPath"

            # Validate PFX loads with password (will fail early if bad)
            certutil -f -p $env:SCOREGENIUS_PFX_PASSWORD -dump $pfxPath | Out-Null
            if ($LASTEXITCODE -ne 0) {
              Write-Error "PFX failed to load; bad password or corrupted content."
              exit 1
            }
            Write-Output "PFX validated."
          } else {
            Write-Output "No PFX base64 provided; signing will be skipped."
            $pfxPath = $null
          }

          # Locate tools
          $makeappx = Get-ChildItem 'C:\Program Files (x86)\Windows Kits\10\bin\' -Recurse -Filter MakeAppx.exe |
                       Sort-Object FullName -Descending | Select-Object -First 1
          if (-not $makeappx) { throw "MakeAppx.exe not found." }

          $signtool = Get-ChildItem 'C:\Program Files (x86)\Windows Kits\10\bin\' -Recurse -Filter signtool.exe |
                       Where-Object { $_.FullName -match '\\x64\\' } |
                       Sort-Object FullName -Descending | Select-Object -First 1

          Write-Output "Using MakeAppx: $($makeappx.FullName)"
          if ($signtool) {
            Write-Output "Using SignTool: $($signtool.FullName)"
          } else {
            Write-Output "x64 SignTool not found; signing will be skipped."
          }

          # Pack
          & $makeappx.FullName pack /d $packageRoot /p $output
          if (-not (Test-Path $output)) { throw "Packaging failed." }
          Write-Output "Created package: $output"

          # Sign if possible
          if ($signtool -and $pfxPath) {
            Write-Output "Signing package with debug output..."
            & $signtool.FullName sign /debug /fd SHA256 /a /f $pfxPath /p $env:SCOREGENIUS_PFX_PASSWORD $output
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Signing failed with code $LASTEXITCODE"
              exit $LASTEXITCODE
            }
            Write-Output "Signing succeeded."
          } else {
            Write-Output "Skipping signing (missing signtool or PFX)."
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: scoregenius-appx
          path: "ScoreGenius_${{ steps.version.outputs.version }}.appx"

      - name: Draft GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.version.outputs.version }}"
          name: "ScoreGenius v${{ steps.version.outputs.version }}"
          draft: true
          files: "ScoreGenius_${{ steps.version.outputs.version }}.appx"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
