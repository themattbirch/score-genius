name: Build & Package ScoreGenius Appx

on:
  workflow_dispatch:

jobs:
  package-appx:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Compute dynamic version
        id: version
        shell: pwsh
        run: |
          $base = "1.12"
          $runnum = $env:GITHUB_RUN_NUMBER
          $version = "$base.$runnum.0"
          Write-Output "version=$version" | Out-File -Encoding ASCII -NoNewline $env:GITHUB_OUTPUT

      - name: Patch manifest version
        shell: pwsh
        run: |
          $manifest = "frontend/windows_package/PackageRoot/AppxManifest.xml"
          if (-not (Test-Path $manifest)) { throw "Manifest not found at $manifest" }
          $version = '${{ steps.version.outputs.version }}'
          [xml]$xml = Get-Content -Raw -Encoding UTF8 $manifest
          $xml.Package.Identity.Version = $version
          $utf8NoBom = New-Object System.Text.UTF8Encoding($false)
          [System.IO.File]::WriteAllText($manifest, $xml.OuterXml, $utf8NoBom)
          "Manifest patched to version $version"

      - name: Patch AppInstaller version + URI
        shell: pwsh
        run: |
          $ai = "frontend/app/ScoreGenius.appinstaller"
          if (-not (Test-Path $ai)) { throw "AppInstaller not found at $ai" }
          $version = '${{ steps.version.outputs.version }}'
          [xml]$doc = Get-Content -Raw -Encoding UTF8 $ai
          $doc.AppInstaller.Version = $version
          # keep hosted filename constant at /app/ScoreGenius.appxbundle
          $doc.AppInstaller.MainPackage.Uri = "https://scoregenius.io/app/ScoreGenius.appxbundle"
          $utf8NoBom = New-Object System.Text.UTF8Encoding($false)
          [System.IO.File]::WriteAllText($ai, $doc.OuterXml, $utf8NoBom)
          "AppInstaller updated to $version and constant URI"

      - name: Ensure code signing certificate exists (reuse prior working step)
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SCOREGENIUS_PFX_B64: ${{ secrets.SCOREGENIUS_PFX_B64 }}
          SCOREGENIUS_PFX_PASSWORD: ${{ secrets.SCOREGENIUS_PFX_PASSWORD }}
        run: |
          if (-not $env:SCOREGENIUS_PFX_B64) {
            "No external PFX; generating test CodeSigning cert."
            $cert = New-SelfSignedCertificate `
              -Subject "CN=ScoreGeniusTest,O=SG,L=NY,C=US" `
              -Type CodeSigningCert `
              -KeyAlgorithm RSA -KeyLength 2048 `
              -HashAlgorithm SHA256 `
              -NotAfter (Get-Date).AddYears(3)
            $pwd     = ConvertTo-SecureString "StrongPfxPass123" -AsPlainText -Force
            $pfxPath = "$PWD\scoregenius_generated.pfx"
            Export-PfxCertificate -Cert $cert -FilePath $pfxPath -Password $pwd
            $b64 = [Convert]::ToBase64String([IO.File]::ReadAllBytes($pfxPath))
            echo "SCOREGENIUS_PFX_B64=$b64" | Out-File -Encoding ascii -Append $env:GITHUB_ENV
            echo "SCOREGENIUS_PFX_PASSWORD=StrongPfxPass123" | Out-File -Encoding ascii -Append $env:GITHUB_ENV
          } else {
            "Using provided PFX"
          }

      - name: Package Appxbundle and sign (store-import + thumbprint)
        shell: pwsh
        env:
          SCOREGENIUS_PFX_B64: ${{ secrets.SCOREGENIUS_PFX_B64 }}
          SCOREGENIUS_PFX_PASSWORD: ${{ secrets.SCOREGENIUS_PFX_PASSWORD }}
        run: |
          $ErrorActionPreference = 'Stop'
          $packageRoot = 'frontend/windows_package/PackageRoot'
          $version = '${{ steps.version.outputs.version }}'
          $appxName = "ScoreGenius_${version}.appx"
          $bundleName = "ScoreGenius_${version}.appxbundle"

          # --- tools
          $binRoot = 'C:\Program Files (x86)\Windows Kits\10\bin\'
          $makeappx = Get-ChildItem $binRoot -Recurse -Filter MakeAppx.exe | Sort-Object FullName -Descending | Select-Object -First 1
          $signtool = Get-ChildItem $binRoot -Recurse -Filter signtool.exe | Where-Object { $_.FullName -match '\\x64\\' } | Sort-Object FullName -Descending | Select-Object -First 1
          if (-not $makeappx) { throw "MakeAppx.exe not found." }
          if (-not $signtool) { throw "signtool.exe not found." }

          # --- pack + bundle
          & $makeappx.FullName pack /o /d $packageRoot /p $appxName
          Test-Path $appxName | Out-Null
          $bundleLayout = Join-Path $env:RUNNER_TEMP "bundlelayout"
          Remove-Item -Recurse -Force $bundleLayout -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Path $bundleLayout | Out-Null
          Copy-Item $appxName -Destination $bundleLayout
          & $makeappx.FullName bundle /o /bv $version /d $bundleLayout /p $bundleName
          Test-Path $bundleName | Out-Null

          # --- decode + import PFX into CurrentUser\My, sign by thumbprint (avoids 0x8007000b)
          if (-not $env:SCOREGENIUS_PFX_B64) { throw "Missing SCOREGENIUS_PFX_B64" }
          $cleaned = ($env:SCOREGENIUS_PFX_B64 -replace '[^A-Za-z0-9+/=]', '')
          $pfxPath = Join-Path $env:RUNNER_TEMP "scoregenius.pfx"
          [IO.File]::WriteAllBytes($pfxPath, [Convert]::FromBase64String($cleaned))
          $pwd = ConvertTo-SecureString $env:SCOREGENIUS_PFX_PASSWORD -AsPlainText -Force

          # Import to user store (important)
          $import = Import-PfxCertificate -FilePath $pfxPath -Password $pwd -CertStoreLocation Cert:\CurrentUser\My
          if (-not $import) { throw "Import-PfxCertificate failed" }
          $thumb = $import.Thumbprint

          # RFC3161 timestamp (Digicert)
          & $signtool.FullName sign /v /debug /fd SHA256 /td SHA256 /sha1 $thumb /tr http://timestamp.digicert.com "$bundleName"
          if ($LASTEXITCODE -ne 0) { throw "Signing failed ($LASTEXITCODE)" }

          # constant name copy for hosting
          Copy-Item $bundleName "ScoreGenius.appxbundle" -Force
          echo "FINAL_PACKAGE=ScoreGenius.appxbundle" | Out-File -Encoding ascii -Append $env:GITHUB_ENV

      - name: Upload artifact (bundle + appinstaller)
        uses: actions/upload-artifact@v4
        with:
          name: scoregenius-package
          path: |
            ${{ env.FINAL_PACKAGE }}
            frontend/app/ScoreGenius.appinstaller

      - name: Draft GitHub Release (attach both)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.version.outputs.version }}"
          name: "ScoreGenius v${{ steps.version.outputs.version }}"
          draft: true
          files: |
            ${{ env.FINAL_PACKAGE }}
            frontend/app/ScoreGenius.appinstaller
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
