name: Build & Package ScoreGenius Appx

on:
  workflow_dispatch:

jobs:
  package-appx:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Compute dynamic version
        id: version
        shell: pwsh
        run: |
          $base = "1.12"
          $runnum = $env:GITHUB_RUN_NUMBER
          $version = "$base.$runnum.0"
          Write-Output "version=$version" | Out-File -Encoding ASCII -NoNewline $env:GITHUB_OUTPUT
          "Computed version: $version"

      # Ensure we have a PFX (generate a self-signed if secrets absent)
      - name: Ensure code signing certificate exists
        shell: pwsh
        env:
          SCOREGENIUS_PFX_B64: ${{ secrets.SCOREGENIUS_PFX_B64 }}
          SCOREGENIUS_PFX_PASSWORD: ${{ secrets.SCOREGENIUS_PFX_PASSWORD }}
        run: |
          if (-not $env:SCOREGENIUS_PFX_B64) {
            "No external PFX; generating self-signed CodeSigning cert."
            $cert = New-SelfSignedCertificate `
              -Subject "CN=ScoreGeniusTest,O=SG,L=NY,C=US" `
              -Type CodeSigningCert `
              -KeyAlgorithm RSA -KeyLength 2048 `
              -HashAlgorithm SHA256 `
              -NotAfter (Get-Date).AddYears(3)
            $pwd     = ConvertTo-SecureString "StrongPfxPass123" -AsPlainText -Force
            $pfxPath = "$PWD\scoregenius_generated.pfx"
            Export-PfxCertificate -Cert $cert -FilePath $pfxPath -Password $pwd
            $b64 = [Convert]::ToBase64String([IO.File]::ReadAllBytes($pfxPath))
            echo "SCOREGENIUS_PFX_B64=$b64"          | Out-File -Encoding ascii -Append $env:GITHUB_ENV
            echo "SCOREGENIUS_PFX_PASSWORD=StrongPfxPass123" | Out-File -Encoding ascii -Append $env:GITHUB_ENV
            "Generated cert Thumbprint: $($cert.Thumbprint)"
          } else {
            "Using provided PFX from secrets."
            if (-not $env:SCOREGENIUS_PFX_PASSWORD) { throw "SCOREGENIUS_PFX_PASSWORD is missing in secrets." }
            # persist secrets to job env
            echo "SCOREGENIUS_PFX_B64=$($env:SCOREGENIUS_PFX_B64)"       | Out-File -Encoding ascii -Append $env:GITHUB_ENV
            echo "SCOREGENIUS_PFX_PASSWORD=$($env:SCOREGENIUS_PFX_PASSWORD)" | Out-File -Encoding ascii -Append $env:GITHUB_ENV
          }

      # Decode + validate PFX
      - name: Decode + validate PFX
        shell: pwsh
        run: |
          if (-not $env:SCOREGENIUS_PFX_B64) { throw "SCOREGENIUS_PFX_B64 missing." }
          $cleaned = ($env:SCOREGENIUS_PFX_B64 -replace '[^A-Za-z0-9+/=]', '')
          try { [void][Convert]::FromBase64String($cleaned) } catch { throw "PFX secret is not valid base64." }
          $pfxPath = Join-Path $env:RUNNER_TEMP "scoregenius.pfx"
          [IO.File]::WriteAllBytes($pfxPath, [Convert]::FromBase64String($cleaned))
          echo "PFX_PATH=$pfxPath" | Out-File -Encoding ascii -Append $env:GITHUB_ENV
          "Decoded PFX to: $pfxPath"
          certutil -f -p $env:SCOREGENIUS_PFX_PASSWORD -dump $pfxPath | Out-Null
          if ($LASTEXITCODE -ne 0) { throw "PFX failed to open with provided password." }
          "PFX password validated."

      # Trust signer locally (so installs/tests don't complain later)
      - name: Trust signing cert on runner
        shell: pwsh
        run: |
          $secure = ConvertTo-SecureString $env:SCOREGENIUS_PFX_PASSWORD -AsPlainText -Force
          $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2(
            $env:PFX_PATH, $secure,
            [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable
          )
          $thumb = $cert.Thumbprint
          $subject = $cert.Subject
          $self = ($cert.Subject -eq $cert.Issuer)
          echo "CERT_PUBLISHER=$subject" | Out-File -Encoding ascii -Append $env:GITHUB_ENV
          "Signer: $subject"
          if ($self) {
            $cerPath = Join-Path $env:RUNNER_TEMP "signer.cer"
            [IO.File]::WriteAllBytes($cerPath, $cert.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert))
            Import-Certificate -FilePath $cerPath -CertStoreLocation Cert:\CurrentUser\Root          | Out-Null
            Import-Certificate -FilePath $cerPath -CertStoreLocation Cert:\CurrentUser\TrustedPeople | Out-Null
            "Installed self-signed cert to Root + TrustedPeople."
          } else {
            "Public/chain cert detected; skipping Root import."
          }

      # Patch manifest + appinstaller (keep your good bits)
      - name: Patch AppxManifest + AppInstaller (version/publisher/URI)
        shell: pwsh
        run: |
          $version = '${{ steps.version.outputs.version }}'
          $publisher = $env:CERT_PUBLISHER

          $manifest = "frontend/windows_package/PackageRoot/AppxManifest.xml"
          if (-not (Test-Path $manifest)) { throw "Manifest not found at $manifest" }
          [xml]$xml = Get-Content -Raw -Encoding UTF8 $manifest
          if (-not $xml.Package.Identity) { throw "Identity element missing." }
          $xml.Package.Identity.Version = $version
          if ($publisher) { $xml.Package.Identity.Publisher = $publisher }
          $utf8NoBom = New-Object System.Text.UTF8Encoding($false)
          [System.IO.File]::WriteAllText($manifest, $xml.OuterXml, $utf8NoBom)
          "Manifest patched to version $version and publisher '$publisher'."

          $ai = "frontend/app/ScoreGenius.appinstaller"
          if (-not (Test-Path $ai)) { throw "AppInstaller not found at $ai" }
          [xml]$doc = Get-Content -Raw -Encoding UTF8 $ai
          $doc.AppInstaller.Version = $version
          $doc.AppInstaller.MainPackage.Uri = "https://scoregenius.io/app/ScoreGenius.appxbundle"
          if ($doc.AppInstaller.MainPackage -and ($doc.AppInstaller.MainPackage | Get-Member -Name SetAttribute)) {
            if ($doc.AppInstaller.MainPackage.HasAttribute("Publisher") -and $publisher) {
              $doc.AppInstaller.MainPackage.SetAttribute("Publisher", $publisher)
            }
          }
          [System.IO.File]::WriteAllText($ai, $doc.OuterXml, $utf8NoBom)
          "AppInstaller updated to $version and constant URI."

      # Locate SDK tools (x64 signtool; makeappx with fallback)
      - name: Locate SDK tools
        shell: pwsh
        run: |
          $binRoot = 'C:\Program Files (x86)\Windows Kits\10\bin\'
          $makeappx = Get-ChildItem $binRoot -Recurse -Filter MakeAppx.exe | Where-Object { $_.FullName -match '\\x64\\' } | Sort-Object FullName -Descending | Select-Object -First 1
          if (-not $makeappx) { $makeappx = Get-ChildItem $binRoot -Recurse -Filter MakeAppx.exe | Sort-Object FullName -Descending | Select-Object -First 1 }
          $signtool = Get-ChildItem $binRoot -Recurse -Filter signtool.exe  | Where-Object { $_.FullName -match '\\x64\\' } | Sort-Object FullName -Descending | Select-Object -First 1
          if (-not $makeappx) { throw "MakeAppx.exe not found." }
          if (-not $signtool) { throw "signtool.exe (x64) not found." }
          echo "MAKEAPPX=$($makeappx.FullName)" | Out-File -Encoding ascii -Append $env:GITHUB_ENV
          echo "SIGNTOOL=$($signtool.FullName)" | Out-File -Encoding ascii -Append $env:GITHUB_ENV
          "Using MakeAppx: $($makeappx.FullName)"
          "Using SignTool: $($signtool.FullName)"

      # Pack -> bundle -> SIGN BUNDLE ONLY (PFX-direct, /a, NO TIMESTAMP) — the flow that worked
      - name: Pack, bundle, sign bundle (PFX-direct, no timestamp)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $packageRoot = 'frontend/windows_package/PackageRoot'
          $version     = '${{ steps.version.outputs.version }}'
          $appxName    = "ScoreGenius_${version}.appx"
          $bundleName  = "ScoreGenius_${version}.appxbundle"

          # Pack .appx
          & $env:MAKEAPPX pack /o /d $packageRoot /p $appxName
          if (-not (Test-Path $appxName)) { throw "Packaging .appx failed." }
          "Created .appx: $appxName"

          # Bundle
          $bundleLayout = Join-Path $env:RUNNER_TEMP "bundlelayout"
          Remove-Item -Recurse -Force $bundleLayout -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Path $bundleLayout | Out-Null
          Copy-Item $appxName -Destination $bundleLayout
          & $env:MAKEAPPX bundle /o /bv $version /d $bundleLayout /p $bundleName
          if (-not (Test-Path $bundleName)) { throw "Bundling failed." }
          "Created bundle: $bundleName"

          # Sign bundle with PFX directly — same flags as the known-good script
          "Signing bundle (no timestamp, PFX-direct)..."
          & $env:SIGNTOOL sign /debug /fd SHA256 /a /f $env:PFX_PATH /p $env:SCOREGENIUS_PFX_PASSWORD "$bundleName"
          if ($LASTEXITCODE -ne 0) { throw "Signing failed (exit $LASTEXITCODE)" }
          "Signing succeeded."

          # Constant name copy for hosting
          Copy-Item $bundleName "ScoreGenius.appxbundle" -Force
          echo "FINAL_PACKAGE=ScoreGenius.appxbundle" | Out-File -Encoding ascii -Append $env:GITHUB_ENV
          "Final bundle (constant name): ScoreGenius.appxbundle"

      - name: Upload artifact (bundle + appinstaller)
        uses: actions/upload-artifact@v4
        with:
          name: scoregenius-package
          path: |
            ${{ env.FINAL_PACKAGE }}
            frontend/app/ScoreGenius.appinstaller

      - name: Draft GitHub Release (attach both)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.version.outputs.version }}"
          name: "ScoreGenius v${{ steps.version.outputs.version }}"
          draft: true
          files: |
            ${{ env.FINAL_PACKAGE }}
            frontend/app/ScoreGenius.appinstaller
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
