name: Build & Package ScoreGenius Appx

on:
  workflow_dispatch:

jobs:
  package-appx:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Compute dynamic version
        id: version
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $base = "1.10"
          $runnum = $env:GITHUB_RUN_NUMBER
          $version = "$base.$runnum.0"
          Write-Output "version=$version" | Out-File -Encoding ASCII -NoNewline $env:GITHUB_OUTPUT

      - name: Patch manifest version
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $manifest = "frontend/windows_package/PackageRoot/AppxManifest.xml"
          if (-not (Test-Path $manifest)) { throw "Manifest not found at $manifest" }
          $version = '${{ steps.version.outputs.version }}'
          [xml]$xml = Get-Content -Raw -Encoding UTF8 $manifest
          $xml.Package.Identity.Version = $version
          $utf8NoBom = New-Object System.Text.UTF8Encoding($false)
          [System.IO.File]::WriteAllText($manifest, $xml.OuterXml, $utf8NoBom)
          Write-Output "Manifest patched to version $version"

      - name: Patch AppInstaller version + URI
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $ai = "frontend/app/ScoreGenius.appinstaller"
          if (-not (Test-Path $ai)) { throw "AppInstaller not found at $ai" }
          $version = '${{ steps.version.outputs.version }}'
          [xml]$doc = Get-Content -Raw -Encoding UTF8 $ai
          $doc.AppInstaller.Version = $version
          # Keep constant filename for hosting
          $doc.AppInstaller.MainPackage.Uri = "https://scoregenius.io/app/ScoreGenius.appxbundle"
          $utf8NoBom = New-Object System.Text.UTF8Encoding($false)
          [System.IO.File]::WriteAllText($ai, $doc.OuterXml, $utf8NoBom)
          Write-Output "Patched AppInstaller to $version with constant URI"

      - name: Ensure loader.html exists in PackageRoot
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $loaderPath = "frontend/windows_package/PackageRoot/loader.html"
          if (-not (Test-Path $loaderPath)) { throw "loader.html missing from PackageRoot" }
          Write-Output "Confirmed loader.html present."

      - name: Ensure code signing certificate exists
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SCOREGENIUS_PFX_B64: ${{ secrets.SCOREGENIUS_PFX_B64 }}
          SCOREGENIUS_PFX_PASSWORD: ${{ secrets.SCOREGENIUS_PFX_PASSWORD }}
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not $env:SCOREGENIUS_PFX_B64) {
            Write-Output "No external PFX provided; generating fresh RSA-2048 code-signing cert."
            $cert = New-SelfSignedCertificate `
              -Subject "CN=ScoreGeniusTest,O=SG,L=NY,C=US" `
              -Type CodeSigningCert `
              -KeyAlgorithm RSA -KeyLength 2048 `
              -HashAlgorithm SHA256 `
              -NotAfter (Get-Date).AddYears(3)

            $pwd     = ConvertTo-SecureString "StrongPfxPass123" -AsPlainText -Force
            $pfxPath = "$PWD\scoregenius_generated.pfx"
            Export-PfxCertificate -Cert $cert -FilePath $pfxPath -Password $pwd

            Get-PfxCertificate $pfxPath | Format-List Subject,Thumbprint,NotAfter

            $b64 = [Convert]::ToBase64String([IO.File]::ReadAllBytes($pfxPath))
            echo "SCOREGENIUS_PFX_B64=$b64" | Out-File -Encoding ascii -Append $env:GITHUB_ENV
            echo "SCOREGENIUS_PFX_PASSWORD=StrongPfxPass123" | Out-File -Encoding ascii -Append $env:GITHUB_ENV
          } else {
            Write-Output "External PFX provided; will sanitize and use it."
          }

      - name: Package Appxbundle and sign
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $ErrorActionPreference = 'Stop'
          $packageRoot = 'frontend/windows_package/PackageRoot'
          $version = '${{ steps.version.outputs.version }}'
          $appxName = "ScoreGenius_${version}.appx"
          $bundleName = "ScoreGenius_${version}.appxbundle"

          # --- sanitize and validate base64 PFX secret ---
          if ($env:SCOREGENIUS_PFX_B64) {
            $cleaned = ($env:SCOREGENIUS_PFX_B64 -replace '[^A-Za-z0-9+/=]', '')
            [Convert]::FromBase64String($cleaned) | Out-Null
            $pfxPath = Join-Path $env:RUNNER_TEMP "scoregenius.pfx"
            [IO.File]::WriteAllBytes($pfxPath, [Convert]::FromBase64String($cleaned))
            certutil -f -p $env:SCOREGENIUS_PFX_PASSWORD -dump $pfxPath | Out-Null
            if ($LASTEXITCODE -ne 0) { throw "PFX failed to load; bad password or corrupted content." }
          } else {
            Write-Output "No PFX base64 provided; signing will be skipped."
            $pfxPath = $null
          }

          # Locate tools
          $binRoot = 'C:\Program Files (x86)\Windows Kits\10\bin\'
          $makeappx = Get-ChildItem $binRoot -Recurse -Filter MakeAppx.exe | Sort-Object FullName -Descending | Select-Object -First 1
          $signtool = Get-ChildItem $binRoot -Recurse -Filter signtool.exe | Where-Object { $_.FullName -match '\\x64\\' } | Sort-Object FullName -Descending | Select-Object -First 1
          if (-not $makeappx) { throw "MakeAppx.exe not found." }

          # Step 1: Pack .appx
          & $makeappx.FullName pack /o /d $packageRoot /p $appxName
          if (-not (Test-Path $appxName)) { throw "Packaging .appx failed." }

          # Step 2: Bundle into .appxbundle (single-arch)
          $bundleLayout = Join-Path $env:RUNNER_TEMP "bundlelayout"
          Remove-Item -Recurse -Force $bundleLayout -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Path $bundleLayout | Out-Null
          Copy-Item $appxName -Destination $bundleLayout

          & $makeappx.FullName bundle /o /bv $version /d $bundleLayout /p $bundleName
          if (-not (Test-Path $bundleName)) { throw "Bundling failed." }

          # Step 3: Sign the bundle
          if ($signtool -and $pfxPath) {
            & $signtool.FullName sign /debug /fd SHA256 /a /f $pfxPath /p $env:SCOREGENIUS_PFX_PASSWORD $bundleName
            if ($LASTEXITCODE -ne 0) { throw "Signing failed with code $LASTEXITCODE" }
          }

          # Step 4: Normalize filename for hosting (constant)
          Copy-Item $bundleName "ScoreGenius.appxbundle" -Force
          echo "FINAL_PACKAGE=ScoreGenius.appxbundle" | Out-File -Encoding ascii -Append $env:GITHUB_ENV

      - name: Upload appxbundle to server
        if: success()
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: ${{ env.FINAL_PACKAGE }}
          target: /var/www/scoregenius/static/app/
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: scoregenius-package
          path: |
            ${{ env.FINAL_PACKAGE }}
            frontend/app/ScoreGenius.appinstaller

      - name: Draft GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.version.outputs.version }}"
          name: "ScoreGenius v${{ steps.version.outputs.version }}"
          draft: true
          files: |
            ${{ env.FINAL_PACKAGE }}
            frontend/app/ScoreGenius.appinstaller
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
